=> creating model '('resnet50', 'classic', 1000)'
Version: {'net': <class 'image_classification.resnet.ResNet'>, 'block': <class 'image_classification.resnet.Bottleneck'>, 'layers': [3, 4, 6, 3], 'widths': [64, 128, 256, 512], 'expansion': 4}
Config: {'conv': <class 'torch.nn.modules.conv.Conv2d'>, 'conv_init': 'fan_out', 'nonlinearity': 'relu', 'last_bn_0_init': False, 'activation': <function <lambda> at 0x7f085cce2048>}
Num classes: 1000
DLL 2020-10-31 08:56:44.740665 - PARAMETER data : /data/imagenet  data_backend : pytorch  arch : resnet50  model_config : classic  num_classes : 1000  workers : 5  epochs : 2  run_epochs : -1  batch_size : 360  optimizer_batch_size : -1  lr : 0.1  lr_schedule : step  warmup : 0  label_smoothing : 0.0  mixup : 0.0  momentum : 0.9  weight_decay : 0.0001  bn_weight_decay : False  nesterov : False  print_freq : 1  resume : None  pretrained_weights :   fp16 : False  static_loss_scale : 1  dynamic_loss_scale : False  prof : 20  amp : False  seed : None  gather_checkpoints : False  raport_file : benchmark.json  evaluate : False  training_only : True  save_checkpoints : True  checkpoint_filename : checkpoint.pth.tar  workspace : ./  memory_format : nchw  distributed : True  local_rank : 0  gpu : 0  world_size : 8 
 ! Weight decay NOT applied to BN parameters 
98
63
RUNNING EPOCHS FROM 0 TO 2
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
DLL 2020-10-31 08:57:00.122787 - Epoch: 0 Iteration: 1  train.loss : 7.07698  train.total_ips : 248.11 img/s
DLL 2020-10-31 08:57:00.986324 - Epoch: 0 Iteration: 2  train.loss : 7.02389  train.total_ips : 3335.34 img/s
DLL 2020-10-31 08:57:01.472237 - Epoch: 0 Iteration: 3  train.loss : 6.99547  train.total_ips : 5928.56 img/s
DLL 2020-10-31 08:57:01.959383 - Epoch: 0 Iteration: 4  train.loss : 6.99633  train.total_ips : 5912.86 img/s
DLL 2020-10-31 08:57:02.436984 - Epoch: 0 Iteration: 5  train.loss : 7.01341  train.total_ips : 6033.94 img/s
DLL 2020-10-31 08:57:02.917705 - Epoch: 0 Iteration: 6  train.loss : 7.05168  train.total_ips : 5993.43 img/s
DLL 2020-10-31 08:57:03.398100 - Epoch: 0 Iteration: 7  train.loss : 7.07633  train.total_ips : 5996.35 img/s
DLL 2020-10-31 08:57:03.878322 - Epoch: 0 Iteration: 8  train.loss : 7.05944  train.total_ips : 5999.46 img/s
DLL 2020-10-31 08:57:04.359337 - Epoch: 0 Iteration: 9  train.loss : 7.09154  train.total_ips : 5989.48 img/s
DLL 2020-10-31 08:57:04.837775 - Epoch: 0 Iteration: 10  train.loss : 7.09588  train.total_ips : 6021.15 img/s
DLL 2020-10-31 08:57:05.318779 - Epoch: 0 Iteration: 11  train.loss : 7.10929  train.total_ips : 5989.05 img/s
DLL 2020-10-31 08:57:05.797871 - Epoch: 0 Iteration: 12  train.loss : 7.06536  train.total_ips : 6013.12 img/s
DLL 2020-10-31 08:57:06.284331 - Epoch: 0 Iteration: 13  train.loss : 7.02912  train.total_ips : 5921.84 img/s
DLL 2020-10-31 08:57:06.773491 - Epoch: 0 Iteration: 14  train.loss : 7.03016  train.total_ips : 5889.41 img/s
DLL 2020-10-31 08:57:07.254643 - Epoch: 0 Iteration: 15  train.loss : 7.06822  train.total_ips : 5989.28 img/s
DLL 2020-10-31 08:57:07.735606 - Epoch: 0 Iteration: 16  train.loss : 7.05089  train.total_ips : 5990.20 img/s
DLL 2020-10-31 08:57:08.217390 - Epoch: 0 Iteration: 17  train.loss : 7.04951  train.total_ips : 5979.22 img/s
DLL 2020-10-31 08:57:08.709320 - Epoch: 0 Iteration: 18  train.loss : 7.14107  train.total_ips : 5856.11 img/s
DLL 2020-10-31 08:57:09.189168 - Epoch: 0 Iteration: 19  train.loss : 7.07767  train.total_ips : 6004.18 img/s
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
DLL 2020-10-31 08:57:10.552453 - Epoch: 0  train.loss : 7.06149  train.total_ips : 5553.83 img/s
DLL 2020-10-31 08:57:10.552603 - Epoch: 0  lr : 0.1  train.compute_ips : 5579.98 img/s train.data_time : 0.10591 s train.compute_time : 0.95172 s
SAVING ./checkpoint.pth.tar
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
DLL 2020-10-31 08:57:13.406700 - Epoch: 1 Iteration: 1  train.loss : 7.08173  train.total_ips : 1185.14 img/s
DLL 2020-10-31 08:57:13.894188 - Epoch: 1 Iteration: 2  train.loss : 7.11147  train.total_ips : 5909.62 img/s
DLL 2020-10-31 08:57:14.399938 - Epoch: 1 Iteration: 3  train.loss : 7.38404  train.total_ips : 5901.96 img/s
DLL 2020-10-31 08:57:14.879317 - Epoch: 1 Iteration: 4  train.loss : 7.12293  train.total_ips : 6010.37 img/s
DLL 2020-10-31 08:57:15.362264 - Epoch: 1 Iteration: 5  train.loss : 7.16105  train.total_ips : 5966.31 img/s
DLL 2020-10-31 08:57:15.842861 - Epoch: 1 Iteration: 6  train.loss : 7.05014  train.total_ips : 5997.95 img/s
DLL 2020-10-31 08:57:16.337424 - Epoch: 1 Iteration: 7  train.loss : 7.03752  train.total_ips : 5965.07 img/s
DLL 2020-10-31 08:57:16.817427 - Epoch: 1 Iteration: 8  train.loss : 7.04195  train.total_ips : 6002.16 img/s
DLL 2020-10-31 08:57:17.299510 - Epoch: 1 Iteration: 9  train.loss : 7.12693  train.total_ips : 5976.57 img/s
DLL 2020-10-31 08:57:17.781041 - Epoch: 1 Iteration: 10  train.loss : 7.06777  train.total_ips : 5982.41 img/s
DLL 2020-10-31 08:57:18.263138 - Epoch: 1 Iteration: 11  train.loss : 7.02873  train.total_ips : 5976.26 img/s
DLL 2020-10-31 08:57:18.743847 - Epoch: 1 Iteration: 12  train.loss : 7.06522  train.total_ips : 5992.58 img/s
DLL 2020-10-31 08:57:19.225359 - Epoch: 1 Iteration: 13  train.loss : 7.06195  train.total_ips : 5983.64 img/s
DLL 2020-10-31 08:57:19.708025 - Epoch: 1 Iteration: 14  train.loss : 6.99739  train.total_ips : 5968.10 img/s
DLL 2020-10-31 08:57:20.188804 - Epoch: 1 Iteration: 15  train.loss : 7.03313  train.total_ips : 5991.85 img/s
DLL 2020-10-31 08:57:20.670374 - Epoch: 1 Iteration: 16  train.loss : 6.94285  train.total_ips : 5981.93 img/s
DLL 2020-10-31 08:57:21.152818 - Epoch: 1 Iteration: 17  train.loss : 7.04735  train.total_ips : 5971.92 img/s
DLL 2020-10-31 08:57:21.636111 - Epoch: 1 Iteration: 18  train.loss : 6.95742  train.total_ips : 5961.44 img/s
DLL 2020-10-31 08:57:22.118311 - Epoch: 1 Iteration: 19  train.loss : 6.97120  train.total_ips : 5973.99 img/s
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
DLL 2020-10-31 08:57:23.561211 - Epoch: 1  train.loss : 7.06383  train.total_ips : 5732.86 img/s
DLL 2020-10-31 08:57:23.561358 - Epoch: 1  lr : 0.1  train.compute_ips : 5976.75 img/s train.data_time : 0.09757 s train.compute_time : 0.48206 s
SAVING ./checkpoint.pth.tar
DLL 2020-10-31 08:57:23.976621 - Summary: train.loss : 7.06383  train.total_ips : 5643.35 img/s
DLL 2020-10-31 08:57:23.976778 - Summary: lr : 0.1  train.compute_ips : 5778.37 img/s train.data_time : 0.10174 s train.compute_time : 0.71689 s
Experiment ended
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--epochs', '2', '--prof', '20', '--batch-size', '360', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
DONE!
