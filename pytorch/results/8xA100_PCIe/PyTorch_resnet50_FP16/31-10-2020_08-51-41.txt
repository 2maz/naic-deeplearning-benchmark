=> creating model '('resnet50', 'classic', 1000)'
Version: {'net': <class 'image_classification.resnet.ResNet'>, 'block': <class 'image_classification.resnet.Bottleneck'>, 'layers': [3, 4, 6, 3], 'widths': [64, 128, 256, 512], 'expansion': 4}
Config: {'conv': <class 'torch.nn.modules.conv.Conv2d'>, 'conv_init': 'fan_out', 'nonlinearity': 'relu', 'last_bn_0_init': False, 'activation': <function <lambda> at 0x7f449bb1af28>}
Num classes: 1000
DLL 2020-10-31 08:51:53.301853 - PARAMETER data : /data/imagenet  data_backend : pytorch  arch : resnet50  model_config : classic  num_classes : 1000  workers : 5  epochs : 2  run_epochs : -1  batch_size : 720  optimizer_batch_size : -1  lr : 0.1  lr_schedule : step  warmup : 0  label_smoothing : 0.0  mixup : 0.0  momentum : 0.9  weight_decay : 0.0001  bn_weight_decay : False  nesterov : False  print_freq : 1  resume : None  pretrained_weights :   fp16 : True  static_loss_scale : 256.0  dynamic_loss_scale : False  prof : 20  amp : False  seed : None  gather_checkpoints : False  raport_file : benchmark.json  evaluate : False  training_only : True  save_checkpoints : True  checkpoint_filename : checkpoint.pth.tar  workspace : ./  memory_format : nchw  distributed : True  local_rank : 0  gpu : 0  world_size : 8 
 ! Weight decay NOT applied to BN parameters 
98
63
Warning:  FP16_Optimizer is deprecated and dangerous, and will be deleted soon.  If it still works, you're probably getting lucky.  For mixed precision, use the documented API https://nvidia.github.io/apex/amp.html, with opt_level=O1.
RUNNING EPOCHS FROM 0 TO 2
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
DLL 2020-10-31 08:52:18.283839 - Epoch: 0 Iteration: 1  train.loss : 7.08984  train.total_ips : 272.22 img/s
DLL 2020-10-31 08:52:19.118139 - Epoch: 0 Iteration: 2  train.loss : 7.08203  train.total_ips : 6903.68 img/s
DLL 2020-10-31 08:52:19.760262 - Epoch: 0 Iteration: 3  train.loss : 7.09375  train.total_ips : 8971.95 img/s
DLL 2020-10-31 08:52:20.399831 - Epoch: 0 Iteration: 4  train.loss : 7.10547  train.total_ips : 9007.94 img/s
DLL 2020-10-31 08:52:21.036757 - Epoch: 0 Iteration: 5  train.loss : 7.10547  train.total_ips : 9046.60 img/s
DLL 2020-10-31 08:52:21.698552 - Epoch: 0 Iteration: 6  train.loss : 7.14844  train.total_ips : 8993.86 img/s
DLL 2020-10-31 08:52:22.333702 - Epoch: 0 Iteration: 7  train.loss : 7.12500  train.total_ips : 9070.50 img/s
DLL 2020-10-31 08:52:22.975559 - Epoch: 0 Iteration: 8  train.loss : 7.10547  train.total_ips : 8975.97 img/s
DLL 2020-10-31 08:52:23.614678 - Epoch: 0 Iteration: 9  train.loss : 7.08203  train.total_ips : 9015.95 img/s
DLL 2020-10-31 08:52:24.255634 - Epoch: 0 Iteration: 10  train.loss : 7.10938  train.total_ips : 8988.01 img/s
DLL 2020-10-31 08:52:24.896211 - Epoch: 0 Iteration: 11  train.loss : 7.10156  train.total_ips : 8993.95 img/s
DLL 2020-10-31 08:52:25.552195 - Epoch: 0 Iteration: 12  train.loss : 7.11719  train.total_ips : 8782.38 img/s
DLL 2020-10-31 08:52:26.193813 - Epoch: 0 Iteration: 13  train.loss : 7.10547  train.total_ips : 8979.99 img/s
DLL 2020-10-31 08:52:26.834832 - Epoch: 0 Iteration: 14  train.loss : 7.10156  train.total_ips : 8989.94 img/s
DLL 2020-10-31 08:52:27.477297 - Epoch: 0 Iteration: 15  train.loss : 7.09375  train.total_ips : 8968.12 img/s
/opt/conda/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:788: UserWarning: Corrupt EXIF data.  Expecting to read 4 bytes but only got 0. 
  warnings.warn(str(msg))
DLL 2020-10-31 08:52:28.128211 - Epoch: 0 Iteration: 16  train.loss : 7.08594  train.total_ips : 8852.55 img/s
DLL 2020-10-31 08:52:28.769257 - Epoch: 0 Iteration: 17  train.loss : 7.10547  train.total_ips : 8987.31 img/s
DLL 2020-10-31 08:52:29.428612 - Epoch: 0 Iteration: 18  train.loss : 7.08984  train.total_ips : 8966.83 img/s
DLL 2020-10-31 08:52:30.068715 - Epoch: 0 Iteration: 19  train.loss : 7.09375  train.total_ips : 9001.29 img/s
DLL 2020-10-31 08:52:32.573455 - Epoch: 0  train.loss : 7.10156  train.total_ips : 8435.12 img/s
DLL 2020-10-31 08:52:32.573719 - Epoch: 0  lr : 0.1  train.compute_ips : 8478.74 img/s train.data_time : 0.15625 s train.compute_time : 1.52118 s
SAVING ./checkpoint.pth.tar
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
DLL 2020-10-31 08:52:37.668520 - Epoch: 1 Iteration: 1  train.loss : 7.07812  train.total_ips : 1261.99 img/s
DLL 2020-10-31 08:52:38.316452 - Epoch: 1 Iteration: 2  train.loss : 7.07812  train.total_ips : 8891.59 img/s
DLL 2020-10-31 08:52:38.968715 - Epoch: 1 Iteration: 3  train.loss : 7.05469  train.total_ips : 8832.97 img/s
DLL 2020-10-31 08:52:39.608324 - Epoch: 1 Iteration: 4  train.loss : 7.04297  train.total_ips : 9008.26 img/s
DLL 2020-10-31 08:52:40.407365 - Epoch: 1 Iteration: 5  train.loss : 7.05859  train.total_ips : 7209.96 img/s
DLL 2020-10-31 08:52:41.308052 - Epoch: 1 Iteration: 6  train.loss : 7.05469  train.total_ips : 6396.46 img/s
DLL 2020-10-31 08:52:41.949283 - Epoch: 1 Iteration: 7  train.loss : 7.05078  train.total_ips : 8986.39 img/s
DLL 2020-10-31 08:52:42.592262 - Epoch: 1 Iteration: 8  train.loss : 7.02734  train.total_ips : 8963.82 img/s
DLL 2020-10-31 08:52:43.264126 - Epoch: 1 Iteration: 9  train.loss : 7.05078  train.total_ips : 9012.04 img/s
DLL 2020-10-31 08:52:43.904352 - Epoch: 1 Iteration: 10  train.loss : 7.03125  train.total_ips : 8998.77 img/s
DLL 2020-10-31 08:52:44.591247 - Epoch: 1 Iteration: 11  train.loss : 7.03516  train.total_ips : 8387.02 img/s
DLL 2020-10-31 08:52:45.232030 - Epoch: 1 Iteration: 12  train.loss : 7.03516  train.total_ips : 8991.00 img/s
DLL 2020-10-31 08:52:45.874792 - Epoch: 1 Iteration: 13  train.loss : 7.02734  train.total_ips : 8964.13 img/s
DLL 2020-10-31 08:52:46.514518 - Epoch: 1 Iteration: 14  train.loss : 7.03125  train.total_ips : 9006.71 img/s
DLL 2020-10-31 08:52:47.246645 - Epoch: 1 Iteration: 15  train.loss : 7.00391  train.total_ips : 7868.88 img/s
DLL 2020-10-31 08:52:47.887688 - Epoch: 1 Iteration: 16  train.loss : 7.01172  train.total_ips : 8987.20 img/s
DLL 2020-10-31 08:52:48.575415 - Epoch: 1 Iteration: 17  train.loss : 7.01562  train.total_ips : 8376.90 img/s
DLL 2020-10-31 08:52:49.216312 - Epoch: 1 Iteration: 18  train.loss : 7.00391  train.total_ips : 8989.10 img/s
DLL 2020-10-31 08:52:49.859784 - Epoch: 1 Iteration: 19  train.loss : 7.01562  train.total_ips : 8953.40 img/s
DLL 2020-10-31 08:52:52.949860 - Epoch: 1  train.loss : 7.03594  train.total_ips : 8253.23 img/s
DLL 2020-10-31 08:52:52.950005 - Epoch: 1  lr : 0.1  train.compute_ips : 8484.42 img/s train.data_time : 0.17572 s train.compute_time : 0.69236 s
SAVING ./checkpoint.pth.tar
DLL 2020-10-31 08:52:53.480879 - Summary: train.loss : 7.10156  train.total_ips : 8344.18 img/s
DLL 2020-10-31 08:52:53.481055 - Summary: lr : 0.1  train.compute_ips : 8481.58 img/s train.data_time : 0.16598 s train.compute_time : 1.10677 s
Experiment ended
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
DONE!
