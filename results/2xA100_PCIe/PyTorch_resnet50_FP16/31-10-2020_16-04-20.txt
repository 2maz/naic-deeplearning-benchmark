=> creating model '('resnet50', 'classic', 1000)'
Version: {'net': <class 'image_classification.resnet.ResNet'>, 'block': <class 'image_classification.resnet.Bottleneck'>, 'layers': [3, 4, 6, 3], 'widths': [64, 128, 256, 512], 'expansion': 4}
Config: {'conv': <class 'torch.nn.modules.conv.Conv2d'>, 'conv_init': 'fan_out', 'nonlinearity': 'relu', 'last_bn_0_init': False, 'activation': <function <lambda> at 0x7efc6bd17f28>}
Num classes: 1000
DLL 2020-10-31 16:04:29.948156 - PARAMETER data : /data/imagenet  data_backend : pytorch  arch : resnet50  model_config : classic  num_classes : 1000  workers : 5  epochs : 2  run_epochs : -1  batch_size : 768  optimizer_batch_size : -1  lr : 0.1  lr_schedule : step  warmup : 0  label_smoothing : 0.0  mixup : 0.0  momentum : 0.9  weight_decay : 0.0001  bn_weight_decay : False  nesterov : False  print_freq : 1  resume : None  pretrained_weights :   fp16 : True  static_loss_scale : 256.0  dynamic_loss_scale : False  prof : 100  amp : False  seed : None  gather_checkpoints : False  raport_file : benchmark.json  evaluate : False  training_only : True  save_checkpoints : True  checkpoint_filename : checkpoint.pth.tar  workspace : ./  memory_format : nchw  distributed : True  local_rank : 0  gpu : 0  world_size : 2 
 ! Weight decay NOT applied to BN parameters 
98
63
Warning:  FP16_Optimizer is deprecated and dangerous, and will be deleted soon.  If it still works, you're probably getting lucky.  For mixed precision, use the documented API https://nvidia.github.io/apex/amp.html, with opt_level=O1.
RUNNING EPOCHS FROM 0 TO 2
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
Traceback (most recent call last):
  File "./main.py", line 541, in <module>
    main(args)
  File "./main.py", line 526, in main
    checkpoint_filename=args.checkpoint_filename,
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 532, in train_loop
    batch_size_multiplier=batch_size_multiplier,
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 340, in train
    loss = step(input, target, optimizer_step=optimizer_step)
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 242, in _step
    optimizer.backward(loss)
  File "/opt/conda/lib/python3.6/site-packages/apex/fp16_utils/fp16_optimizer.py", line 432, in backward
    scaled_loss.backward(retain_graph=retain_graph)
  File "/opt/conda/lib/python3.6/site-packages/torch/tensor.py", line 214, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/opt/conda/lib/python3.6/site-packages/torch/autograd/__init__.py", line 132, in backward
    allow_unreachable=True)  # allow_unreachable flag
RuntimeError: cuDNN error: CUDNN_STATUS_INTERNAL_ERROR
Traceback (most recent call last):
  File "./main.py", line 541, in <module>
    main(args)
  File "./main.py", line 526, in main
    checkpoint_filename=args.checkpoint_filename,
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 532, in train_loop
    batch_size_multiplier=batch_size_multiplier,
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 340, in train
    loss = step(input, target, optimizer_step=optimizer_step)
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 242, in _step
    optimizer.backward(loss)
  File "/opt/conda/lib/python3.6/site-packages/apex/fp16_utils/fp16_optimizer.py", line 432, in backward
    scaled_loss.backward(retain_graph=retain_graph)
  File "/opt/conda/lib/python3.6/site-packages/torch/tensor.py", line 214, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/opt/conda/lib/python3.6/site-packages/torch/autograd/__init__.py", line 132, in backward
    allow_unreachable=True)  # allow_unreachable flag
RuntimeError: cuDNN error: CUDNN_STATUS_INTERNAL_ERROR
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '768', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '768', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
DONE!
