=> creating model '('resnet50', 'classic')'
Version: {'net': <class 'image_classification.resnet.ResNet'>, 'block': <class 'image_classification.resnet.Bottleneck'>, 'layers': [3, 4, 6, 3], 'widths': [64, 128, 256, 512], 'expansion': 4, 'num_classes': 1000}
Config: {'conv': <class 'torch.nn.modules.conv.Conv2d'>, 'conv_init': 'fan_out', 'nonlinearity': 'relu', 'last_bn_0_init': False, 'activation': <function <lambda> at 0x7fc70d87b840>}
read 1281167 files from 1000 directories
read 50000 files from 1000 directories
DLL 2020-06-23 04:40:30.254319 - PARAMETER data : /data/imagenet  data_backend : dali-cpu  arch : resnet50  model_config : classic  workers : 5  epochs : 2  batch_size : 184  optimizer_batch_size : -1  lr : 0.1  lr_schedule : step  warmup : 0  label_smoothing : 0.0  mixup : 0.0  momentum : 0.9  weight_decay : 0.0001  bn_weight_decay : False  nesterov : False  print_freq : 1  resume :   pretrained_weights :   fp16 : True  static_loss_scale : 256.0  dynamic_loss_scale : False  prof : 100  amp : False  seed : None  gather_checkpoints : False  raport_file : benchmark.json  evaluate : False  training_only : True  save_checkpoints : True  workspace : ./  distributed : True  local_rank : 0  gpu : 0  world_size : 8 
 ! Weight decay NOT applied to BN parameters 
98
63
Warning:  FP16_Optimizer is deprecated and dangerous, and will be deleted soon.  If it still works, you're probably getting lucky.  For mixed precision, use the documented API https://nvidia.github.io/apex/amp.html, with opt_level=O1.
DLL 2020-06-23 04:40:41.952579 - Epoch: 0 Iteration: 1  train.loss : 7.08984  train.total_ips : 133.30 img/s
DLL 2020-06-23 04:40:42.711636 - Epoch: 0 Iteration: 2  train.loss : 7.10938  train.total_ips : 1939.31 img/s
DLL 2020-06-23 04:40:43.276338 - Epoch: 0 Iteration: 3  train.loss : 7.13281  train.total_ips : 2607.07 img/s
DLL 2020-06-23 04:40:43.855597 - Epoch: 0 Iteration: 4  train.loss : 7.18359  train.total_ips : 2541.50 img/s
DLL 2020-06-23 04:40:44.326933 - Epoch: 0 Iteration: 5  train.loss : 7.19922  train.total_ips : 3124.68 img/s
DLL 2020-06-23 04:40:44.833410 - Epoch: 0 Iteration: 6  train.loss : 7.26562  train.total_ips : 2906.74 img/s
DLL 2020-06-23 04:40:45.359863 - Epoch: 0 Iteration: 7  train.loss : 7.23438  train.total_ips : 2796.41 img/s
DLL 2020-06-23 04:40:45.869019 - Epoch: 0 Iteration: 8  train.loss : 7.27344  train.total_ips : 2891.51 img/s
Traceback (most recent call last):
  File "./main.py", line 475, in <module>
    main(args)
  File "./main.py", line 460, in main
    checkpoint_dir=args.workspace)
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 492, in train_loop
    batch_size_multiplier=batch_size_multiplier)
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 318, in train
    loss = step(input, target, optimizer_step=optimizer_step)
  File "/workspace/examples/resnet50v1.5/image_classification/training.py", line 237, in _step
    optimizer.backward(loss)
  File "/opt/conda/lib/python3.6/site-packages/apex/fp16_utils/fp16_optimizer.py", line 432, in backward
    scaled_loss.backward(retain_graph=retain_graph)
  File "/opt/conda/lib/python3.6/site-packages/torch/tensor.py", line 195, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/opt/conda/lib/python3.6/site-packages/torch/autograd/__init__.py", line 99, in backward
    allow_unreachable=True)  # allow_unreachable flag
RuntimeError: CUDA out of memory. Tried to allocate 180.00 MiB (GPU 3; 10.76 GiB total capacity; 7.87 GiB already allocated; 177.12 MiB free; 8.22 GiB reserved in total by PyTorch)
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '100', '--batch-size', '184', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only']
DONE!
