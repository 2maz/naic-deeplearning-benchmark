=> creating model '('resnet50', 'classic', 1000)'
Version: {'net': <class 'image_classification.resnet.ResNet'>, 'block': <class 'image_classification.resnet.Bottleneck'>, 'layers': [3, 4, 6, 3], 'widths': [64, 128, 256, 512], 'expansion': 4}
Config: {'conv': <class 'torch.nn.modules.conv.Conv2d'>, 'conv_init': 'fan_out', 'nonlinearity': 'relu', 'last_bn_0_init': False, 'activation': <function <lambda> at 0x7f9952fb6f28>}
Num classes: 1000
DLL 2020-11-04 07:55:47.729221 - PARAMETER data : /data/imagenet  data_backend : pytorch  arch : resnet50  model_config : classic  num_classes : 1000  workers : 5  epochs : 2  run_epochs : -1  batch_size : 720  optimizer_batch_size : -1  lr : 0.1  lr_schedule : step  warmup : 0  label_smoothing : 0.0  mixup : 0.0  momentum : 0.9  weight_decay : 0.0001  bn_weight_decay : False  nesterov : False  print_freq : 1  resume : None  pretrained_weights :   fp16 : True  static_loss_scale : 256.0  dynamic_loss_scale : False  prof : 20  amp : False  seed : None  gather_checkpoints : False  raport_file : benchmark.json  evaluate : False  training_only : True  save_checkpoints : True  checkpoint_filename : checkpoint.pth.tar  workspace : ./  memory_format : nchw  distributed : True  local_rank : 0  gpu : 0  world_size : 4 
 ! Weight decay NOT applied to BN parameters 
98
63
Warning:  FP16_Optimizer is deprecated and dangerous, and will be deleted soon.  If it still works, you're probably getting lucky.  For mixed precision, use the documented API https://nvidia.github.io/apex/amp.html, with opt_level=O1.
RUNNING EPOCHS FROM 0 TO 2
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
DLL 2020-11-04 07:56:06.391194 - Epoch: 0 Iteration: 1  train.loss : 7.07812  train.total_ips : 174.03 img/s
DLL 2020-11-04 07:56:07.102293 - Epoch: 0 Iteration: 2  train.loss : 7.08203  train.total_ips : 4050.16 img/s
DLL 2020-11-04 07:56:07.697674 - Epoch: 0 Iteration: 3  train.loss : 7.06250  train.total_ips : 4837.97 img/s
DLL 2020-11-04 07:56:08.289592 - Epoch: 0 Iteration: 4  train.loss : 7.10547  train.total_ips : 4866.33 img/s
DLL 2020-11-04 07:56:08.880973 - Epoch: 0 Iteration: 5  train.loss : 7.13672  train.total_ips : 4870.59 img/s
DLL 2020-11-04 07:56:09.486498 - Epoch: 0 Iteration: 6  train.loss : 7.13672  train.total_ips : 4756.44 img/s
DLL 2020-11-04 07:56:10.078821 - Epoch: 0 Iteration: 7  train.loss : 7.17578  train.total_ips : 4863.16 img/s
DLL 2020-11-04 07:56:10.669822 - Epoch: 0 Iteration: 8  train.loss : 7.14453  train.total_ips : 4873.42 img/s
DLL 2020-11-04 07:56:11.261455 - Epoch: 0 Iteration: 9  train.loss : 7.11719  train.total_ips : 4869.30 img/s
DLL 2020-11-04 07:56:11.853754 - Epoch: 0 Iteration: 10  train.loss : 7.12891  train.total_ips : 4862.97 img/s
DLL 2020-11-04 07:56:12.444799 - Epoch: 0 Iteration: 11  train.loss : 7.17578  train.total_ips : 4873.00 img/s
DLL 2020-11-04 07:56:13.036426 - Epoch: 0 Iteration: 12  train.loss : 7.14844  train.total_ips : 4868.92 img/s
DLL 2020-11-04 07:56:13.628179 - Epoch: 0 Iteration: 13  train.loss : 7.17188  train.total_ips : 4867.74 img/s
DLL 2020-11-04 07:56:14.219554 - Epoch: 0 Iteration: 14  train.loss : 7.20312  train.total_ips : 4870.91 img/s
DLL 2020-11-04 07:56:14.811284 - Epoch: 0 Iteration: 15  train.loss : 7.22656  train.total_ips : 4867.97 img/s
DLL 2020-11-04 07:56:15.403241 - Epoch: 0 Iteration: 16  train.loss : 7.13281  train.total_ips : 4866.13 img/s
DLL 2020-11-04 07:56:15.994899 - Epoch: 0 Iteration: 17  train.loss : 7.12500  train.total_ips : 4868.31 img/s
DLL 2020-11-04 07:56:16.586637 - Epoch: 0 Iteration: 18  train.loss : 7.18359  train.total_ips : 4867.94 img/s
DLL 2020-11-04 07:56:17.178787 - Epoch: 0 Iteration: 19  train.loss : 7.21484  train.total_ips : 4864.46 img/s
DLL 2020-11-04 07:56:19.752766 - Epoch: 0  train.loss : 7.14727  train.total_ips : 4585.06 img/s
DLL 2020-11-04 07:56:19.752931 - Epoch: 0  lr : 0.1  train.compute_ips : 4604.98 img/s train.data_time : 0.15505 s train.compute_time : 1.24132 s
SAVING ./checkpoint.pth.tar
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
/workspace/examples/resnet50v1.5/image_classification/dataloaders.py:306: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:141.)
  tensor[i] += torch.from_numpy(nump_array)
DLL 2020-11-04 07:56:24.014617 - Epoch: 1 Iteration: 1  train.loss : 7.25000  train.total_ips : 757.30 img/s
DLL 2020-11-04 07:56:25.146403 - Epoch: 1 Iteration: 2  train.loss : 7.21094  train.total_ips : 2544.86 img/s
DLL 2020-11-04 07:56:25.742375 - Epoch: 1 Iteration: 3  train.loss : 7.26953  train.total_ips : 4832.90 img/s
DLL 2020-11-04 07:56:26.373492 - Epoch: 1 Iteration: 4  train.loss : 7.23438  train.total_ips : 4714.66 img/s
DLL 2020-11-04 07:56:26.964824 - Epoch: 1 Iteration: 5  train.loss : 7.17578  train.total_ips : 4873.03 img/s
DLL 2020-11-04 07:56:27.556596 - Epoch: 1 Iteration: 6  train.loss : 7.26172  train.total_ips : 4868.01 img/s
DLL 2020-11-04 07:56:28.168937 - Epoch: 1 Iteration: 7  train.loss : 7.14844  train.total_ips : 4705.39 img/s
DLL 2020-11-04 07:56:28.760550 - Epoch: 1 Iteration: 8  train.loss : 7.22656  train.total_ips : 4869.03 img/s
DLL 2020-11-04 07:56:29.352113 - Epoch: 1 Iteration: 9  train.loss : 7.25000  train.total_ips : 4869.77 img/s
DLL 2020-11-04 07:56:29.943707 - Epoch: 1 Iteration: 10  train.loss : 7.23828  train.total_ips : 4868.58 img/s
DLL 2020-11-04 07:56:30.535991 - Epoch: 1 Iteration: 11  train.loss : 7.12500  train.total_ips : 4863.55 img/s
DLL 2020-11-04 07:56:31.127931 - Epoch: 1 Iteration: 12  train.loss : 7.13672  train.total_ips : 4866.27 img/s
DLL 2020-11-04 07:56:31.719551 - Epoch: 1 Iteration: 13  train.loss : 7.11719  train.total_ips : 4868.88 img/s
DLL 2020-11-04 07:56:32.311090 - Epoch: 1 Iteration: 14  train.loss : 7.08594  train.total_ips : 4869.39 img/s
DLL 2020-11-04 07:56:32.916855 - Epoch: 1 Iteration: 15  train.loss : 7.00781  train.total_ips : 4754.62 img/s
DLL 2020-11-04 07:56:33.507806 - Epoch: 1 Iteration: 16  train.loss : 7.07422  train.total_ips : 4874.55 img/s
DLL 2020-11-04 07:56:34.099546 - Epoch: 1 Iteration: 17  train.loss : 7.07812  train.total_ips : 4867.51 img/s
DLL 2020-11-04 07:56:34.691214 - Epoch: 1 Iteration: 18  train.loss : 7.07812  train.total_ips : 4868.06 img/s
DLL 2020-11-04 07:56:35.281975 - Epoch: 1 Iteration: 19  train.loss : 7.01562  train.total_ips : 4875.52 img/s
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 240, in _feed
    send_bytes(obj)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 200, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 404, in _send_bytes
    self._send(header + buf)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
DLL 2020-11-04 07:56:38.289409 - Epoch: 1  train.loss : 7.15059  train.total_ips : 4523.89 img/s
DLL 2020-11-04 07:56:38.289572 - Epoch: 1  lr : 0.1  train.compute_ips : 4836.67 img/s train.data_time : 0.18622 s train.compute_time : 0.59577 s
SAVING ./checkpoint.pth.tar
DLL 2020-11-04 07:56:38.768843 - Summary: train.loss : 7.15059  train.total_ips : 4554.48 img/s
DLL 2020-11-04 07:56:38.769050 - Summary: lr : 0.1  train.compute_ips : 4720.83 img/s train.data_time : 0.17064 s train.compute_time : 0.91855 s
Experiment ended
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
['/opt/conda/bin/python', '-u', './main.py', '/data/imagenet', '--arch', 'resnet50', '--fp16', '--static-loss-scale', '256', '--epochs', '2', '--prof', '20', '--batch-size', '720', '--raport-file', 'benchmark.json', '--print-freq', '1', '--training-only', '--data-backend', 'pytorch']
DONE!
